#!/bin/bash
#
# bootstrap installs things.

DOTFILES_ROOT="`pwd`"

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  echo -n "Git email: "
  read gitemail
  git config --global user.email $gitemail
  success 'gitconfig'
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_dotfiles () {
  info 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}

setup_gitconfig
install_dotfiles

# Create ~/bin if it doesn't exist.
if [ ! -f ~/bash_completion ]; then
  mkdir -p ~/bin
fi

# Install Homebrew and macOS specific apps for Apple Silicon Macs.
if [ $(uname) == "Darwin" ] && [ $(uname -p) == "arm" ]; then
  if ! which brew > /dev/null; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi

  # CLI installs.
  $which brew update
  $which brew upgrade
  $which brew tap dart-lang/dart
  $which brew tap homebrew/core
  $which brew tap netlify/netlifyctl
  $which brew install ansible
  $which brew install awscli
  $which brew install clamav
  $which brew install cocoapods
  $which brew install colima
  # First run: colima start --cpu=4 --disk=100 --memory=6 --dns=1.1.1.1
  $which brew install ctags
  $which brew install dart
  $which brew install deno
  $which brew install docker
  $which brew install dos2unix
  $which brew install drud/ddev/ddev
  $which brew install fzf
  $which brew install gh
  $which brew install git
  $which brew install go
  $which brew install gpatch
  $which brew install htop
  $which brew install httpie
  $which brew install httrack
  $which brew install inetutils
  $which brew install jo
  $which brew install jq
  $which brew install mariadb
  $which brew install mkcert nss
  $which brew install mosh
  $which brew install netlifyctl
  $which brew install nmap
  $which brew install pantheon-systems/external/terminus
  $which brew install php@8.1
  $which brew install platformsh/tap/platformsh-cli
  $which brew install postgresql@14
  $which brew install pv
  $which brew install reattach-to-user-namespace
  $which brew install redis
  $which brew install sass/sass/sass
  $which brew install shellcheck
  $which brew install ssh-copy-id
  $which brew install the_silver_searcher
  $which brew install tig
  $which brew install tmux
  $which brew install tmuxinator
  $which brew install tree
  $which brew install vim
  $which brew install watch
  $which brew install watchman
  $which brew install wget

  # Download iTerm2 theme.
  if [ ! -f ~/bin/xcodedark.itermcolors ]; then
    cd ~/bin && wget https://raw.githubusercontent.com/arzg/vim-colors-xcode/master/xcodedark.itermcolors
  fi

  # Update Flutter.
  if which flutter > /dev/null; then
    flutter upgrade
  fi
fi

# Install Debian Linux specific apps.
if [ -f /etc/debian_version ]; then
  sudo apt-get update
  sudo apt-get -y install ansible
  sudo apt-get -y install ctags
  sudo apt-get -y install dos2unix
  sudo apt-get -y install gh
  sudo apt-get -y install htop
  sudo apt-get -y install httpie
  sudo apt-get -y install jo
  sudo apt-get -y install jq
  sudo apt-get -y install mariadb-client
  sudo apt-get -y install mosh
  sudo apt-get -y install php
  sudo apt-get -y install php-curl
  sudo apt-get -y install php-zip
  sudo apt-get -y install php-xml
  sudo apt-get -y install php-mbstring
  sudo apt-get -y install pv
  sudo apt-get -y install redis-tools
  sudo apt-get -y install ruby
  sudo apt-get -y install silversearcher-ag
  sudo apt-get -y install tig
  sudo apt-get -y install tmux
  sudo apt-get -y install tree
  sudo apt-get -y install tmuxinator

  if `cat /proc/cpuinfo | grep -q "Raspberry Pi"`; then
    sudo apt-get -y install vim-nox
  fi
fi

# Install spaceship-prompt theme.
if [ ! -d $HOME/.oh-my-zsh/custom/themes/spaceship-prompt ]; then
  git clone https://github.com/denysdovhan/spaceship-prompt.git $HOME/.oh-my-zsh/custom/themes/spaceship-prompt
  ln -s $HOME/.oh-my-zsh/custom/themes/spaceship-prompt/spaceship.zsh-theme $HOME/.oh-my-zsh/themes/spaceship.zsh-theme
fi

# Install zsh syntax highlighting.
if [ ! -d $HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting ]; then
  git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
fi

# Install Plug.
curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

# Install plugins.
vim +PlugInstall +qall

# Update Plug and plugins.
vim +PlugUpgrade +PlugUpdate +qall

# Install Sack.
if [ ! -d ~/.dotfiles/bin/sack ]; then
  git clone https://github.com/sampson-chen/sack.git ~/.dotfiles/bin/sack && cd ~/.dotfiles/bin/sack && chmod +x install_sack.sh && ./install_sack.sh
fi

# Install nvm and global node.
if [ ! -d "$HOME/.nvm" ]; then
  mkdir -p $HOME/.nvm
fi
curl -o- https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
nvm install 18
nvm alias default 18
npm install -g npm
npm update -g

# Install npm packags.
npm install -g yarn --force
npm install -g firebase-tools
npm install -g lighthouse
npm install -g static-marks

# Install Composer.
curl -Ss https://getcomposer.org/installer | php
mv composer.phar ~/bin/composer

# Install Composer project dependencies.
composer global require drush/config-extra \
squizlabs/php_codesniffer \
dealerdirect/phpcodesniffer-composer-installer \
drupal/coder \
mglaman/drupal-check --with-dependencies

# Run Composer global update.
composer global update --with-dependencies

# Install Drush.
# https://docs.drush.org/en/8.x/install/.
wget -O drush.phar https://github.com/drush-ops/drush/releases/download/8.4.11/drush.phar
chmod +x drush.phar
mv drush.phar ~/bin/drush

# Install Acquia CLI.
# https://docs.acquia.com/acquia-cli/install/.
curl -OL https://github.com/acquia/cli/releases/latest/download/acli.phar
chmod +x acli.phar
mv acli.phar ~/bin/acli

# Install Google Cloud SDK
rm -rf $HOME/bin/google-cloud-sdk
curl https://sdk.cloud.google.com > install.sh
bash install.sh --disable-prompts --install-dir=$HOME/bin
rm -f install.sh

echo ''
echo '  All installed!'
